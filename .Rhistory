geom_density(alpha = 0.7) +
labs(title = paste("Density Plot of", input$metric, "for", input$category),
x = input$metric, y = "Density") +
theme_minimal()
})
output$summaryTable <- renderDT({
datatable(summary(filtered_data()[[input$metric]]))
})
output$statsTable <- renderDT({
datatable(data.frame(
Mean = mean(filtered_data()[[input$metric]], na.rm = TRUE),
Median = median(filtered_data()[[input$metric]], na.rm = TRUE),
SD = sd(filtered_data()[[input$metric]], na.rm = TRUE)
))
})
output$quantileTable <- renderDT({
datatable(as.data.frame(quantile(filtered_data()[[input$metric]], probs = seq(0, 1, 0.25), na.rm = TRUE)))
})
}
shinyApp(ui, server)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(gtools)
minecraft <- read_csv("minecraft_game_usage.csv") %>%
clean_names()
minecraft <- read_csv("minecraft_game_usage.csv") %>%
clean_names()
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(gtools)
minecraft <- read_csv("minecraft_game_usage.csv") %>%
clean_names()
View(minecraft)
minecraft %>%
filter(game_mode!= "Creative")
minecraft1 <- minecraft %>%
filter(game_mode!= "Creative")
minecraft %>%
mutate(playtime_hours = playtime_minutes/60)
minecraft1 <- minecraft %>%
filter(game_mode!= "Creative")
minecraft1 %>%
mutate(playtime_hours = playtime_minutes/60) %>%
minecraft_playtime <- playtime %>%
mutate( player_type= case_when(playtime_hours<=1.28 ~ "beginner",
playtime_hours>1.28 & playtime_hours<=2.53 ~ "intermediate",
playtime_hours>2.53 & playtime_hours<= 3.77 ~ "skilled",
playtime_hours>3.77 ~ "master"))
minecraft1 <- minecraft %>%
filter(game_mode!= "Creative")
minecraft1
minecraft1 %>%
mutate(playtime_hours = playtime_minutes/60) %>%
minecraft_playtime <- playtime %>%
mutate( player_type= case_when(playtime_hours<=1.28 ~ "beginner",
playtime_hours>1.28 & playtime_hours<=2.53 ~ "intermediate",
playtime_hours>2.53 & playtime_hours<= 3.77 ~ "skilled",
playtime_hours>3.77 ~ "master"))
minecraft1 %>%
mutate(playtime_hours = playtime_minutes/60) %>%
mutate( player_type= case_when(playtime_hours<=1.28 ~ "beginner",
playtime_hours>1.28 & playtime_hours<=2.53 ~ "intermediate",
playtime_hours>2.53 & playtime_hours<= 3.77 ~ "skilled",
playtime_hours>3.77 ~ "master"))
minecraft1 %>%
ggplot(aes(tools_used,fill = player_type))+
geom_bar(position = "dodge")
minecraft_f <- minecraft1 %>%
mutate(playtime_hours = playtime_minutes/60) %>%
mutate( player_type= case_when(playtime_hours<=1.28 ~ "beginner",
playtime_hours>1.28 & playtime_hours<=2.53 ~ "intermediate",
playtime_hours>2.53 & playtime_hours<= 3.77 ~ "skilled",
playtime_hours>3.77 ~ "master"))
minecraft_f %>%
ggplot(aes(tools_used,fill = player_type))+
geom_bar(position = "dodge")
minecraft_f %>%
filter(device_type=="PC")
ggplot(aes(tools_used,fill = player_type))+
geom_bar(position = "dodge")
minecraft_f %>%
filter(device_type=="PC") %>%
ggplot(aes(tools_used,fill = player_type))+
geom_bar(position = "dodge")
minecraft_f %>%
filter(device_type=="PC"& game_mode == "Survival") %>%
ggplot(aes(tools_used,fill = player_type))+
geom_bar(position = "dodge")
minecraft_f %>%
filter(device_type=="PC"& game_mode != "Adventure") %>%
ggplot(aes(tools_used,fill = player_type))+
geom_bar(position = "dodge")
minecraft_f %>%
filter(device_type=="PC") %>%
ggplot(aes(tools_used,fill = player_type))+
geom_bar(position = "dodge")
minecraft_f %>%
ggplot(aes(experience_level))+
geom_density()+
facet_wrap(~.player_type)
minecraft_f %>%
ggplot(aes(experience_level,fill = player_type)+
geom_density()
minecraft_f <- minecraft1 %>%
mutate(playtime_hours = playtime_minutes/60) %>%
mutate( player_type= case_when(playtime_hours<=1.28 ~ "beginner",
playtime_hours>1.28 & playtime_hours<=2.53 ~ "intermediate",
playtime_hours>2.53 & playtime_hours<= 3.77 ~ "skilled",
playtime_hours>3.77 ~ "master")) %>%
filter(device_type=="PC")
View(minecraft_f)
install.packages("DT")
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(gtools)
library(DT)
minecraft <- read_csv("minecraft_game_usage.csv") %>%
clean_names()
playtime <- minecraft %>%
mutate(player_type = playtime_minutes/60)
playtime
quartile_playtime <- quantcut(playtime$player_type)
table(quartile_playtime)
minecraft_playtime <- playtime %>%
mutate( player_type= case_when(player_type<=1.28 ~ "beginner",
player_type>1.28 & player_type<=2.53 ~ "intermediate",
player_type>2.53 & player_type<= 3.77 ~ "skilled",
player_type>3.77 ~ "master"))
minecraft_playtime %>%
ggplot(aes(tools_used,fill = player_type))+
geom_bar(position = "dodge")
library(shiny)
ui <- fluidPage(
titlePanel("Minecraft Player Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("category", "Select Player Category:",
choices = unique(minecraft_playtime$Player_Category),
selected = "beginner"),
selectInput("metric", "Select Metric:",
choices = c("Playtime_minutes", "Blocks_Placed", "Blocks_Destroyed",
"Items_Crafted", "Mobs_Killed", "Deaths"))
),
mainPanel(
tabsetPanel(
tabPanel("Plots",
plotOutput("boxPlot"),
plotOutput("histPlot"),
plotOutput("densityPlot")
),
tabPanel("Tables",
DTOutput("summaryTable"),
DTOutput("statsTable"),
DTOutput("quantileTable")
)
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
minecraft_playtime %>% filter(Player_Category == input$category)
})
output$boxPlot <- renderPlot({
ggplot(filtered_data(), aes(x = Player_Category, y = .data[[input$metric]], fill = Player_Category)) +
geom_boxplot() +
labs(title = paste("Boxplot of", input$metric, "for", input$category),
x = "Player Category", y = input$metric) +
theme_minimal()
})
output$histPlot <- renderPlot({
ggplot(filtered_data(), aes(x = .data[[input$metric]], fill = Player_Category)) +
geom_histogram(binwidth = 10, alpha = 0.7) +
labs(title = paste("Histogram of", input$metric, "for", input$category),
x = input$metric, y = "Count") +
theme_minimal()
})
output$densityPlot <- renderPlot({
ggplot(filtered_data(), aes(x = .data[[input$metric]], fill = Player_Category)) +
geom_density(alpha = 0.7) +
labs(title = paste("Density Plot of", input$metric, "for", input$category),
x = input$metric, y = "Density") +
theme_minimal()
})
output$summaryTable <- renderDT({
datatable(summary(filtered_data()[[input$metric]]))
})
output$statsTable <- renderDT({
datatable(data.frame(
Mean = mean(filtered_data()[[input$metric]], na.rm = TRUE),
Median = median(filtered_data()[[input$metric]], na.rm = TRUE),
SD = sd(filtered_data()[[input$metric]], na.rm = TRUE)
))
})
output$quantileTable <- renderDT({
datatable(as.data.frame(quantile(filtered_data()[[input$metric]], probs = seq(0, 1, 0.25), na.rm = TRUE)))
})
}
shinyApp(ui, server)
View(minecraft_playtime)
names(minecraft_playtime)
library(shiny)
ui <- fluidPage(
titlePanel("Minecraft Player Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("category", "Select Player Category:",
choices = unique(minecraft_playtime$player_type),
selected = "beginner"),
selectInput("metric", "Select Metric:",
choices = c("Playtime_minutes", "Blocks_Placed", "Blocks_Destroyed", "Items_Crafted", "Mobs_Killed", "Deaths"))),
mainPanel(
tabsetPanel(
tabPanel("Plots",
plotOutput("boxPlot"),
plotOutput("histPlot"),
plotOutput("densityPlot")),
tabPanel("Tables",
DTOutput("summaryTable"),
DTOutput("statsTable"),
DTOutput("quantileTable")
)
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
minecraft_playtime %>%
filter(Player_Category == input$category)
})
output$boxPlot <- renderPlot({
ggplot(filtered_data(), aes(x = Player_Category, y = .data[[input$metric]], fill = Player_Category)) +
geom_boxplot() +
labs(title = paste("Boxplot of", input$metric, "for", input$category),
x = "Player Category", y = input$metric) +
theme_minimal()
})
output$histPlot <- renderPlot({
ggplot(filtered_data(), aes(x = .data[[input$metric]], fill = Player_Category)) +
geom_histogram(binwidth = 10, alpha = 0.7) +
labs(title = paste("Histogram of", input$metric, "for", input$category),
x = input$metric, y = "Count") +
theme_minimal()
})
output$densityPlot <- renderPlot({
ggplot(filtered_data(), aes(x = .data[[input$metric]], fill = Player_Category)) +
geom_density(alpha = 0.7) +
labs(title = paste("Density Plot of", input$metric, "for", input$category),
x = input$metric, y = "Density") +
theme_minimal()
})
output$summaryTable <- renderDT({
datatable(summary(filtered_data()[[input$metric]]))
})
output$statsTable <- renderDT({
datatable(data.frame(
Mean = mean(filtered_data()[[input$metric]], na.rm = TRUE),
Median = median(filtered_data()[[input$metric]], na.rm = TRUE),
SD = sd(filtered_data()[[input$metric]], na.rm = TRUE)
))
})
output$quantileTable <- renderDT({
datatable(as.data.frame(quantile(filtered_data()[[input$metric]], probs = seq(0, 1, 0.25), na.rm = TRUE)))
})
}
shinyApp(ui, server)
minecraft_playtime <- playtime %>%
mutate( player_type= case_when(player_type<=1.28 ~ "beginner",
player_type>1.28 & player_type<=2.53 ~ "intermediate",
player_type>2.53 & player_type<= 3.77 ~ "skilled",
player_type>3.77 ~ "master")) %>%
filter(device_type == "PC")
minecraft_playtime %>%
ggplot(aes(tools_used,fill = player_type))+
geom_bar(position = "dodge")
minecraft_playtime <- playtime %>%
mutate( player_type= case_when(player_type<=1.28 ~ "beginner",
player_type>1.28 & player_type<=2.53 ~ "intermediate",
player_type>2.53 & player_type<= 3.77 ~ "skilled",
player_type>3.77 ~ "master")) %>%
filter(device_type == "PC" & game_mode == "survial")
minecraft_playtime <- playtime %>%
mutate( player_type= case_when(player_type<=1.28 ~ "beginner",
player_type>1.28 & player_type<=2.53 ~ "intermediate",
player_type>2.53 & player_type<= 3.77 ~ "skilled",
player_type>3.77 ~ "master")) %>%
filter(device_type == "PC" & game_mode == "survial")
minecraft_playtime <- playtime %>%
mutate( player_type= case_when(player_type<=1.28 ~ "beginner",
player_type>1.28 & player_type<=2.53 ~ "intermediate",
player_type>2.53 & player_type<= 3.77 ~ "skilled",
player_type>3.77 ~ "master")) %>%
filter(device_type == "PC" & game_mode == "survial")
minecraft_playtime
View(minecraft_playtime)
minecraft_playtime <- playtime %>%
mutate( player_type= case_when(player_type<=1.28 ~ "beginner",
player_type>1.28 & player_type<=2.53 ~ "intermediate",
player_type>2.53 & player_type<= 3.77 ~ "skilled",
player_type>3.77 ~ "master")) %>%
filter(device_type == "PC")
minecraft_playtime
View(minecraft_playtime)
minecraft_playtime <- playtime %>%
mutate( player_type= case_when(player_type<=1.28 ~ "beginner",
player_type>1.28 & player_type<=2.53 ~ "intermediate",
player_type>2.53 & player_type<= 3.77 ~ "skilled",
player_type>3.77 ~ "master")) %>%
filter(device_type == "PC" & game_mode == "Survival")
minecraft_playtime
View(minecraft_playtime)
minecraft_playtime %>%
ggplot(aes(tools_used,fill = player_type))+
geom_bar(position = "dodge")
library(shiny)
ui <- fluidPage(
titlePanel("Minecraft Player Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("Type", "Select Player Type:",
choices = unique(minecraft_playtime$player_type),
selected = "beginner"),
selectInput("metric", "Select Metric:",
choices = c("Playtime_minutes", "Blocks_Placed", "Blocks_Destroyed", "Items_Crafted", "Mobs_Killed", "Deaths"))),
mainPanel(
tabsetPanel(
tabPanel("Plots",
plotOutput("boxPlot"),
plotOutput("histPlot"),
plotOutput("densityPlot")),
tabPanel("Tables",
DTOutput("summaryTable"),
DTOutput("statsTable"),
DTOutput("quantileTable")
)
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
minecraft_playtime %>%
filter(Player_Category == input$category)
})
output$boxPlot <- renderPlot({
ggplot(filtered_data(), aes(x = Player_Category, y = .data[[input$metric]], fill = Player_Category)) +
geom_boxplot() +
labs(title = paste("Boxplot of", input$metric, "for", input$category),
x = "Player Category", y = input$metric) +
theme_minimal()
})
output$histPlot <- renderPlot({
ggplot(filtered_data(), aes(x = .data[[input$metric]], fill = Player_Category)) +
geom_histogram(binwidth = 10, alpha = 0.7) +
labs(title = paste("Histogram of", input$metric, "for", input$category),
x = input$metric, y = "Count") +
theme_minimal()
})
output$densityPlot <- renderPlot({
ggplot(filtered_data(), aes(x = .data[[input$metric]], fill = Player_Category)) +
geom_density(alpha = 0.7) +
labs(title = paste("Density Plot of", input$metric, "for", input$category),
x = input$metric, y = "Density") +
theme_minimal()
})
output$summaryTable <- renderDT({
datatable(summary(filtered_data()[[input$metric]]))
})
output$statsTable <- renderDT({
datatable(data.frame(
Mean = mean(filtered_data()[[input$metric]], na.rm = TRUE),
Median = median(filtered_data()[[input$metric]], na.rm = TRUE),
SD = sd(filtered_data()[[input$metric]], na.rm = TRUE)
))
})
output$quantileTable <- renderDT({
datatable(as.data.frame(quantile(filtered_data()[[input$metric]], probs = seq(0, 1, 0.25), na.rm = TRUE)))
})
}
shinyApp(ui, server)
write_csv(minecraft_playtime,"clean_survival_PC_MCdata", row.names=FALSE)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(gtools)
library(DT)
library(readr)
write_csv(minecraft_playtime,"clean_survival_PC_MCdata", row.names=FALSE)
write_csv(minecraft_playtime,"clean_survival_PC_MCdata")
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(gtools)
library(DT)
library(readr)
mc <- read_csv("clean_survival_PC_MCdata.csv")
write_csv(minecraft_playtime,"clean_survival_PC_MCdata.csv")
install.packages("DT")
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(gtools)
library(DT)
library(readr)
minecraft <- read_csv("minecraft_game_usage.csv") %>%
clean_names()
playtime <- minecraft %>%
mutate(player_type = playtime_minutes/60)
playtime
quartile_playtime <- quantcut(playtime$player_type)
table(quartile_playtime)
minecraft_playtime <- playtime %>%
mutate( player_type= case_when(player_type<=1.28 ~ "beginner",
player_type>1.28 & player_type<=2.53 ~ "intermediate",
player_type>2.53 & player_type<= 3.77 ~ "skilled",
player_type>3.77 ~ "master")) %>%
filter(device_type == "PC" & game_mode == "Survival")
minecraft_playtime
minecraft_playtime %>%
ggplot(aes(tools_used,fill = player_type))+
geom_bar(position = "dodge")
write_csv(minecraft_playtime,"clean_survival_PC_MCdata.csv")
names(minecraft_playtime)
library(shiny)
ui <- fluidPage(
titlePanel("Minecraft Player Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("Type", "Select Player Type:",
choices = unique(minecraft_playtime$player_type),
selected = "beginner"),
selectInput("metric", "Select Metric:",
choices = c("Playtime_minutes", "Blocks_Placed", "Blocks_Destroyed", "Items_Crafted", "Mobs_Killed", "Deaths"))),
mainPanel(
tabsetPanel(
tabPanel("Plots",
plotOutput("boxPlot"),
plotOutput("histPlot"),
plotOutput("densityPlot")),
tabPanel("Tables",
DTOutput("summaryTable"),
DTOutput("statsTable"),
DTOutput("quantileTable")
)
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
minecraft_playtime %>%
filter(Player_Category == input$category)
})
output$boxPlot <- renderPlot({
ggplot(filtered_data(), aes(x = Player_Category, y = .data[[input$metric]], fill = Player_Category)) +
geom_boxplot() +
labs(title = paste("Boxplot of", input$metric, "for", input$category),
x = "Player Category", y = input$metric) +
theme_minimal()
})
output$histPlot <- renderPlot({
ggplot(filtered_data(), aes(x = .data[[input$metric]], fill = Player_Category)) +
geom_histogram(binwidth = 10, alpha = 0.7) +
labs(title = paste("Histogram of", input$metric, "for", input$category),
x = input$metric, y = "Count") +
theme_minimal()
})
output$densityPlot <- renderPlot({
ggplot(filtered_data(), aes(x = .data[[input$metric]], fill = Player_Category)) +
geom_density(alpha = 0.7) +
labs(title = paste("Density Plot of", input$metric, "for", input$category),
x = input$metric, y = "Density") +
theme_minimal()
})
output$summaryTable <- renderDT({
datatable(summary(filtered_data()[[input$metric]]))
})
output$statsTable <- renderDT({
datatable(data.frame(
Mean = mean(filtered_data()[[input$metric]], na.rm = TRUE),
Median = median(filtered_data()[[input$metric]], na.rm = TRUE),
SD = sd(filtered_data()[[input$metric]], na.rm = TRUE)
))
})
output$quantileTable <- renderDT({
datatable(as.data.frame(quantile(filtered_data()[[input$metric]], probs = seq(0, 1, 0.25), na.rm = TRUE)))
})
}
shinyApp(ui, server)
write_csv(minecraft_playtime,"clean_survival_PC_MCdata.csv")
write_csv(minecraft_playtime,"clean_survival_PC_MCdata.csv")
write_csv(minecraft_playtime,"clean_survival_PC_MCdata.csv")
mc <- read_csv("clean_survival_PC_MCdata.csv")
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(gtools)
library(DT)
library(readr)
mc <- read_csv("clean_survival_PC_MCdata.csv")
View(mc)
