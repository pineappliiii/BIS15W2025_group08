library(shiny)
library(ggplot2)
library(scatterplot3d)
install.packages("scatterplot3d")
install.packages("scatterplot3d")
library(shiny)
library(ggplot2)
library(scatterplot3d)
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
library(shiny)
library(ggplot2)
library(scatterplot3d)
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
setwd("~/Desktop/BIS15W2025_group08")
library(shiny)
library(ggplot2)
library(scatterplot3d)
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
df$player_type <- trimws(as.character(df$player_type))
# Define UI
ui <- fluidPage(
titlePanel("Minecraft Player Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("player_type", "Select Player Type:", choices = NULL),
selectInput("data_type", "Select Data Type:", choices = c("Table", "Graph", "3D Map")),
selectInput("data_view", "Select View:", choices = c("Tool Used", "Mobs Killed vs Biome", "Health Remaining Distribution", "Hunger vs Health", "Blocks Placed vs Destroyed", "Armor Equipped", "Player 3D Position"))
),
mainPanel(
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Tool Used'", tableOutput("table_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Tool Used'", plotOutput("barplot_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Mobs Killed vs Biome'", plotOutput("boxplot_mobs")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Health Remaining Distribution'", plotOutput("hist_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Hunger vs Health'", plotOutput("scatter_hunger_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Blocks Placed vs Destroyed'", plotOutput("scatter_blocks")),
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Armor Equipped'", tableOutput("table_armor")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Armor Equipped'", plotOutput("barplot_armor")),
conditionalPanel(
condition = "input.data_type == '3D Map' && input.data_view == 'Player 3D Position'", plotOutput("plot_3d_position"))
)
)
)
# Define Server
server <- function(input, output, session) {
updateSelectInput(session, "player_type", choices = unique(df$player_type))
filtered_data <- reactive({
req(input$player_type)
df[df$player_type == input$player_type & !is.na(df$armor_equipped), ]
})
output$plot_3d_position <- renderPlot({
req(nrow(filtered_data()) > 0)
scatterplot3d(
x = filtered_data()$coordinates_x,
y = filtered_data()$coordinates_y,
z = filtered_data()$coordinates_z,
color = "blue", pch = 16, main = "Player 3D Position",
xlab = "X Coordinate", ylab = "Y Coordinate", zlab = "Z Coordinate"
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(plotly)
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
library(shiny)
library(ggplot2)
library(plotly)
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
