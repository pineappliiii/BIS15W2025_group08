# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
df$player_type <- trimws(as.character(df$player_type))
player_types <- unique(df$player_type)
color_map <- setNames(my_palette, player_types)
# Define UI
ui <- fluidPage(
titlePanel("Minecraft Player Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("player_type", "Select Player Type:", choices = NULL),
selectInput("data_type", "Select Data Type:", choices = c("Table", "Graph", "3D Map")),
selectInput("data_view", "Select View:", choices = c("Tool Used", "Mobs Killed vs Biome", "Health Remaining Distribution", "Hunger vs Health", "Blocks Placed vs Destroyed", "Armor Equipped", "Player 3D Position"))
),
mainPanel(
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Tool Used'", tableOutput("table_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Tool Used'", plotOutput("barplot_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Mobs Killed vs Biome'", plotOutput("boxplot_mobs")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Health Remaining Distribution'", plotOutput("hist_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Hunger vs Health'", plotOutput("scatter_hunger_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Blocks Placed vs Destroyed'", plotOutput("scatter_blocks")),
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Armor Equipped'", tableOutput("table_armor")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Armor Equipped'", plotOutput("barplot_armor")),
conditionalPanel(
condition = "input.data_type == '3D Map' && input.data_view == 'Player 3D Position'", plotlyOutput("plot_3d_position"))
)
)
)
# Define Server
server <- function(input, output, session) {
updateSelectInput(session, "player_type", choices = unique(df$player_type))
filtered_data <- reactive({
req(input$player_type)
df[df$player_type == input$player_type & !is.na(df$armor_equipped), ]
})
output$barplot_tool <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = tools_used)) +
geom_bar() +
theme_minimal() +
labs(title = "Tools Used", x = "Tool Type", y = "Count")
})
output$table_tool <- renderTable({
req(nrow(filtered_data()) > 0)
as.data.frame(table(filtered_data()$tools_used))
})
output$boxplot_mobs <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = biome, y = mobs_killed)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Mobs Killed vs Biome", x = "Biome", y = "Mobs Killed")
})
output$hist_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = health_remaining)) +
geom_histogram(aes(y = after_stat(density)), fill="thistle", alpha = 0.4, color = "black")+
geom_density(color = "red")+
theme_minimal() +
labs(title = "Health Remaining Distribution", x = "Health Remaining")
})
output$scatter_hunger_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = hunger_level, y = health_remaining)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Hunger Level vs Health Remaining", x = "Hunger Level", y = "Health Remaining")
})
output$scatter_blocks <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = blocks_placed, y = blocks_destroyed)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Blocks Placed vs Blocks Destroyed", x = "Blocks Placed", y = "Blocks Destroyed")
})
output$table_armor <- renderTable({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
if (nrow(armor_table) == 0) return(data.frame("Armor Type" = "No Data", "Number" = 0))
armor_table
})
output$barplot_armor <- renderPlot({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
req(nrow(armor_table) > 0)
ggplot(armor_table, aes(x = reorder(`Armor Type`, -Number), y = Number)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Armor Equipped", x = "Armor Type", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$plot_3d_position <- renderPlot({
req(nrow(filtered_data()) > 0)
player_colors <- color_map[filtered_data()$player_type]
scatterplot3d(
x = filtered_data()$coordinates_x,
y = filtered_data()$coordinates_y,
z = filtered_data()$coordinates_z,
color = player_colors, pch = 16, main = "Player 3D Position",
xlab = "X Coordinate", ylab = "Y Coordinate", zlab = "Z Coordinate"
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(gtools)
library(DT)
library(readr)
library(shiny)
library(plotly)
library(ggsci)
library(scatterplot3d)
colors <- paletteer::palettes_d_names
my_palette <- paletteer_d("ggsci::schwifty_rickandmorty")
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
df$player_type <- trimws(as.character(df$player_type))
player_types <- unique(df$player_type)
color_map <- setNames(my_palette, player_types)
# Define UI
ui <- fluidPage(
titlePanel("Minecraft Player Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("player_type", "Select Player Type:", choices = NULL),
selectInput("data_type", "Select Data Type:", choices = c("Table", "Graph", "3D Map")),
selectInput("data_view", "Select View:", choices = c("Tool Used", "Mobs Killed vs Biome", "Health Remaining Distribution", "Hunger vs Health", "Blocks Placed vs Destroyed", "Armor Equipped", "Player 3D Position"))
),
mainPanel(
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Tool Used'", tableOutput("table_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Tool Used'", plotOutput("barplot_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Mobs Killed vs Biome'", plotOutput("boxplot_mobs")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Health Remaining Distribution'", plotOutput("hist_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Hunger vs Health'", plotOutput("scatter_hunger_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Blocks Placed vs Destroyed'", plotOutput("scatter_blocks")),
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Armor Equipped'", tableOutput("table_armor")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Armor Equipped'", plotOutput("barplot_armor")),
conditionalPanel(
condition = "input.data_type == '3D Map' && input.data_view == 'Player 3D Position'", plotlyOutput("plot_3d_position"))
)
)
)
# Define Server
server <- function(input, output, session) {
updateSelectInput(session, "player_type", choices = unique(df$player_type))
filtered_data <- reactive({
req(input$player_type)
df[df$player_type == input$player_type & !is.na(df$armor_equipped), ]
})
output$barplot_tool <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = tools_used)) +
geom_bar() +
theme_minimal() +
labs(title = "Tools Used", x = "Tool Type", y = "Count")
})
output$table_tool <- renderTable({
req(nrow(filtered_data()) > 0)
as.data.frame(table(filtered_data()$tools_used))
})
output$boxplot_mobs <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = biome, y = mobs_killed)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Mobs Killed vs Biome", x = "Biome", y = "Mobs Killed")
})
output$hist_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = health_remaining)) +
geom_histogram(aes(y = after_stat(density)), fill="thistle", alpha = 0.4, color = "black")+
geom_density(color = "red")+
theme_minimal() +
labs(title = "Health Remaining Distribution", x = "Health Remaining")
})
output$scatter_hunger_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = hunger_level, y = health_remaining)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Hunger Level vs Health Remaining", x = "Hunger Level", y = "Health Remaining")
})
output$scatter_blocks <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = blocks_placed, y = blocks_destroyed)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Blocks Placed vs Blocks Destroyed", x = "Blocks Placed", y = "Blocks Destroyed")
})
output$table_armor <- renderTable({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
if (nrow(armor_table) == 0) return(data.frame("Armor Type" = "No Data", "Number" = 0))
armor_table
})
output$barplot_armor <- renderPlot({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
req(nrow(armor_table) > 0)
ggplot(armor_table, aes(x = reorder(`Armor Type`, -Number), y = Number)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Armor Equipped", x = "Armor Type", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$plot_3d_position <- renderPlot({
req(nrow(filtered_data()) > 0)
player_colors <- color_map[filtered_data()$player_type]
scatterplot3d(
x = filtered_data()$coordinates_x,
y = filtered_data()$coordinates_y,
z = filtered_data()$coordinates_z,
color = player_colors, pch = 16, main = "Player 3D Position",
xlab = "X Coordinate", ylab = "Y Coordinate", zlab = "Z Coordinate"
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
df$player_type <- trimws(as.character(df$player_type))
player_types <- unique(df$player_type)
if (length(player_types) > length(my_palette)) {
my_palette <- colorRampPalette(my_palette)(length(player_types))  # Expand colors if needed
} else {
my_palette <- my_palette[1:length(player_types)]  # Trim if too many
}
color_map <- setNames(my_palette, player_types)
# Define UI
ui <- fluidPage(
titlePanel("Minecraft Player Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("player_type", "Select Player Type:", choices = NULL),
selectInput("data_type", "Select Data Type:", choices = c("Table", "Graph", "3D Map")),
selectInput("data_view", "Select View:", choices = c("Tool Used", "Mobs Killed vs Biome", "Health Remaining Distribution", "Hunger vs Health", "Blocks Placed vs Destroyed", "Armor Equipped", "Player 3D Position"))
),
mainPanel(
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Tool Used'", tableOutput("table_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Tool Used'", plotOutput("barplot_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Mobs Killed vs Biome'", plotOutput("boxplot_mobs")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Health Remaining Distribution'", plotOutput("hist_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Hunger vs Health'", plotOutput("scatter_hunger_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Blocks Placed vs Destroyed'", plotOutput("scatter_blocks")),
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Armor Equipped'", tableOutput("table_armor")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Armor Equipped'", plotOutput("barplot_armor")),
conditionalPanel(
condition = "input.data_type == '3D Map' && input.data_view == 'Player 3D Position'", plotlyOutput("plot_3d_position"))
)
)
)
# Define Server
server <- function(input, output, session) {
updateSelectInput(session, "player_type", choices = unique(df$player_type))
filtered_data <- reactive({
req(input$player_type)
df[df$player_type == input$player_type & !is.na(df$armor_equipped), ]
})
output$barplot_tool <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = tools_used)) +
geom_bar() +
theme_minimal() +
labs(title = "Tools Used", x = "Tool Type", y = "Count")
})
output$table_tool <- renderTable({
req(nrow(filtered_data()) > 0)
as.data.frame(table(filtered_data()$tools_used))
})
output$boxplot_mobs <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = biome, y = mobs_killed)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Mobs Killed vs Biome", x = "Biome", y = "Mobs Killed")
})
output$hist_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = health_remaining)) +
geom_histogram(aes(y = after_stat(density)), fill="thistle", alpha = 0.4, color = "black")+
geom_density(color = "red")+
theme_minimal() +
labs(title = "Health Remaining Distribution", x = "Health Remaining")
})
output$scatter_hunger_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = hunger_level, y = health_remaining)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Hunger Level vs Health Remaining", x = "Hunger Level", y = "Health Remaining")
})
output$scatter_blocks <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = blocks_placed, y = blocks_destroyed)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Blocks Placed vs Blocks Destroyed", x = "Blocks Placed", y = "Blocks Destroyed")
})
output$table_armor <- renderTable({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
if (nrow(armor_table) == 0) return(data.frame("Armor Type" = "No Data", "Number" = 0))
armor_table
})
output$barplot_armor <- renderPlot({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
req(nrow(armor_table) > 0)
ggplot(armor_table, aes(x = reorder(`Armor Type`, -Number), y = Number)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Armor Equipped", x = "Armor Type", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$plot_3d_position <- renderPlot({
req(nrow(filtered_data()) > 0)
player_colors <- color_map[filtered_data()$player_type]
scatterplot3d(
x = filtered_data()$coordinates_x,
y = filtered_data()$coordinates_y,
z = filtered_data()$coordinates_z,
color = player_colors, pch = 16, main = "Player 3D Position",
xlab = "X Coordinate", ylab = "Y Coordinate", zlab = "Z Coordinate"
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(gtools)
library(DT)
library(readr)
library(shiny)
library(plotly)
library(ggsci)
library(scatterplot3d)
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
df$player_type <- trimws(as.character(df$player_type))
player_types <- unique(df$player_type)
my_palette <- paletteer_d("ggsci::schwifty_rickandmorty")
# Ensure the number of colors matches the number of player types
if (length(player_types) > length(my_palette)) {
my_palette <- colorRampPalette(my_palette)(length(player_types))  # Expand colors if needed
} else {
my_palette <- my_palette[1:length(player_types)]  # Trim if too many
}
color_map <- setNames(my_palette, player_types)
# Define UI
ui <- fluidPage(
titlePanel("Minecraft Player Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("player_type", "Select Player Type:", choices = NULL),
selectInput("data_type", "Select Data Type:", choices = c("Table", "Graph", "3D Map")),
selectInput("data_view", "Select View:", choices = c("Tool Used", "Mobs Killed vs Biome", "Health Remaining Distribution", "Hunger vs Health", "Blocks Placed vs Destroyed", "Armor Equipped", "Player 3D Position"))
),
mainPanel(
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Tool Used'", tableOutput("table_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Tool Used'", plotOutput("barplot_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Mobs Killed vs Biome'", plotOutput("boxplot_mobs")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Health Remaining Distribution'", plotOutput("hist_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Hunger vs Health'", plotOutput("scatter_hunger_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Blocks Placed vs Destroyed'", plotOutput("scatter_blocks")),
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Armor Equipped'", tableOutput("table_armor")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Armor Equipped'", plotOutput("barplot_armor")),
conditionalPanel(
condition = "input.data_type == '3D Map' && input.data_view == 'Player 3D Position'", plotlyOutput("plot_3d_position"))
)
)
)
# Define Server
server <- function(input, output, session) {
updateSelectInput(session, "player_type", choices = unique(df$player_type))
filtered_data <- reactive({
req(input$player_type)
df[df$player_type == input$player_type & !is.na(df$armor_equipped), ]
})
output$barplot_tool <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = tools_used)) +
geom_bar() +
theme_minimal() +
labs(title = "Tools Used", x = "Tool Type", y = "Count")
})
output$table_tool <- renderTable({
req(nrow(filtered_data()) > 0)
as.data.frame(table(filtered_data()$tools_used))
})
output$boxplot_mobs <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = biome, y = mobs_killed)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Mobs Killed vs Biome", x = "Biome", y = "Mobs Killed")
})
output$hist_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = health_remaining)) +
geom_histogram(aes(y = after_stat(density)), fill="thistle", alpha = 0.4, color = "black")+
geom_density(color = "red")+
theme_minimal() +
labs(title = "Health Remaining Distribution", x = "Health Remaining")
})
output$scatter_hunger_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = hunger_level, y = health_remaining)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Hunger Level vs Health Remaining", x = "Hunger Level", y = "Health Remaining")
})
output$scatter_blocks <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = blocks_placed, y = blocks_destroyed)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Blocks Placed vs Blocks Destroyed", x = "Blocks Placed", y = "Blocks Destroyed")
})
output$table_armor <- renderTable({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
if (nrow(armor_table) == 0) return(data.frame("Armor Type" = "No Data", "Number" = 0))
armor_table
})
output$barplot_armor <- renderPlot({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
req(nrow(armor_table) > 0)
ggplot(armor_table, aes(x = reorder(`Armor Type`, -Number), y = Number)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Armor Equipped", x = "Armor Type", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$plot_3d_position <- renderPlot({
req(nrow(filtered_data()) > 0)
player_colors <- color_map[filtered_data()$player_type]
scatterplot3d(
x = filtered_data()$coordinates_x,
y = filtered_data()$coordinates_y,
z = filtered_data()$coordinates_z,
color = player_colors, pch = 16, main = "Player 3D Position",
xlab = "X Coordinate", ylab = "Y Coordinate", zlab = "Z Coordinate"
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
