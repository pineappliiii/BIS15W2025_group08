selectInput("y_var", "Y-axis Variable", choices = c("Playtime_minutes", "Blocks_Placed", "Blocks_Destroyed", "Items_Crafted", "Mobs_Killed", "Deaths", "Health_Remaining", "Hunger_Level", "Experience_Level", "Chat_Messages"), selected = "Blocks_Destroyed"),
plotOutput("scatter_plot")
),
# Fourth tab: 3D Plot
tabItem(
tabName = "three_D",
h2("3D Plot"),
selectInput("x",
"Select Game Mode",
choices = unique(minecraft$Game_Mode),
selected = "Survival"),
plotlyOutput("three_D_plot")  # Use plotlyOutput here
)
)
)
)
# Define Server
server <- function(input, output) {
# Render Data Table
output$data_table <- renderDT({
datatable(minecraft, options = list(pageLength = 10))
})
# Render Summary Statistics
output$bar_graph <- renderPlot({
ggplot(minecraft, aes_string(x = input$x_var, fill = input$y_var)) +
geom_bar() +
theme_minimal() +
labs(title = paste("Bar Graph of", input$x_var, "Filled by", input$y_var))
})
# Render Scatter Plot
output$scatter_plot <- renderPlot({
ggplot(minecraft, aes_string(x = input$x_var, y = input$y_var)) +
geom_point() +
geom_smooth(method = lm, se = TRUE) +
labs(title = paste("Scatter Plot of", input$x_var, "vs", input$y_var)) +
theme_minimal()
})
# Render 3D Plot using plotly
output$three_D_plot <- renderPlotly({
# Filter the data based on selected Game Mode
filtered_data <- minecraft %>% filter(Game_Mode == input$x)
# Create the 3D scatter plot
plot_ly(filtered_data,
x = ~Coordinates_X,
y = ~Coordinates_Z,
z = ~Coordinates_Y,
type = "scatter3d",
mode = "markers",
marker = list(size = 3, color = 'skyblue'))  # Added closing parenthesis here
})
}
# Run the app
shinyApp(ui, server)
# Load required libraries
library(shiny)
library(shinydashboard)
library(ggplot2)
library(DT)
library(plotly)  # Load plotly for 3D plotting
library(readr)
# Read the data
minecraft <- read_csv("copy_of_jiamins_minecraft_game_usage.csv")
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "Minecraft"),
dashboardSidebar(
sidebarMenu(
menuItem("Data Table", tabName = "data", icon = icon("table")),
menuItem("Bar Graph", tabName = "graph", icon = icon("chart-column")),
menuItem("Scatter Plot", tabName = "plot", icon = icon("chart-line")),
menuItem("3D Plot", tabName = "three_D", icon = icon("cubes"))
)
),
dashboardBody(
tabItems(
# First tab: Data Table
tabItem(
tabName = "data",
h2("Data Table"),
DTOutput("data_table")
),
# Second tab: Summary Statistics
tabItem(
tabName = "graph",
h2("Bar Graph"),
selectInput("x_var", "X-axis Variable", choices = c("Tools_Used", "Armor_Equipped", "Weather", "Game_Mode", "Day_Cycle", "Deaths", "Health_Remaining", "Hunger_Level", "Biome"), selected = "Deaths"),
selectInput("y_var", "Fill Variable", choices = c("Tools_Used", "Armor_Equipped", "Weather", "Game_Mode", "Day_Cycle", "Deaths", "Health_Remaining", "Hunger_Level", "Biome"), selected = "Game_Mode"),
plotOutput("bar_graph")
),
# Third tab: Scatter Plot
tabItem(
tabName = "plot",
h2("Scatter Plot"),
selectInput("x_var", "X-axis Variable", choices = c("Playtime_minutes", "Blocks_Placed", "Blocks_Destroyed", "Items_Crafted", "Mobs_Killed", "Deaths", "Health_Remaining", "Hunger_Level", "Experience_Level", "Chat_Messages"), selected = "Blocks_Placed"),
selectInput("y_var", "Y-axis Variable", choices = c("Playtime_minutes", "Blocks_Placed", "Blocks_Destroyed", "Items_Crafted", "Mobs_Killed", "Deaths", "Health_Remaining", "Hunger_Level", "Experience_Level", "Chat_Messages"), selected = "Blocks_Destroyed"),
plotOutput("scatter_plot")
),
# Fourth tab: 3D Plot
tabItem(
tabName = "three_D",
h2("3D Plot"),
selectInput("x",
"Select Game Mode",
choices = unique(minecraft$Game_Mode),
selected = "Survival"),
plotlyOutput("three_D_plot")  # Use plotlyOutput here
)
)
)
)
# Define Server
server <- function(input, output) {
# Render Data Table
output$data_table <- renderDT({
minecraft %>%
select("Playtime_minutes", "Blocks_Placed", "Blocks_Destroyed", "Items_Crafted", "Mobs_Killed", "Deaths", "Biome", "Health_Remaining", "Hunger_Level", "Experience_Level", "Tools_Used", "Armor_Equipped", "Weather", "Game_Mode", "Day_Cycle", "Chat_Messages") %>%
datatable(options = list(pageLength = 10))
})
# Render Summary Statistics
output$bar_graph <- renderPlot({
ggplot(minecraft, aes_string(x = input$x_var, fill = input$y_var)) +
geom_bar() +
theme_minimal() +
labs(title = paste("Bar Graph of", input$x_var, "Filled by", input$y_var))
})
# Render Scatter Plot
output$scatter_plot <- renderPlot({
ggplot(minecraft, aes_string(x = input$x_var, y = input$y_var)) +
geom_point() +
geom_smooth(method = lm, se = TRUE) +
labs(title = paste("Scatter Plot of", input$x_var, "vs", input$y_var)) +
theme_minimal()
})
# Render 3D Plot using plotly
output$three_D_plot <- renderPlotly({
# Filter the data based on selected Game Mode
filtered_data <- minecraft %>% filter(Game_Mode == input$x)
# Create the 3D scatter plot
plot_ly(filtered_data,
x = ~Coordinates_X,
y = ~Coordinates_Z,
z = ~Coordinates_Y,
type = "scatter3d",
mode = "markers",
marker = list(size = 3, color = 'skyblue'))  # Added closing parenthesis here
})
}
# Run the app
shinyApp(ui, server)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(gtools)
library(DT)
library(readr)
library(shiny)
library(plotly)
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
df$player_type <- trimws(as.character(df$player_type))
# Define UI
ui <- fluidPage(
titlePanel("Minecraft Player Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("player_type", "Select Player Type:", choices = NULL),
selectInput("data_type", "Select Data Type:", choices = c("Table", "Graph", "3D Map")),
selectInput("data_view", "Select View:", choices = c("Tool Used", "Mobs Killed vs Biome", "Health Remaining Distribution", "Hunger vs Health", "Blocks Placed vs Destroyed", "Armor Equipped", "Player 3D Position"))
),
mainPanel(
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Tool Used'", tableOutput("table_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Tool Used'", plotOutput("barplot_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Mobs Killed vs Biome'", plotOutput("boxplot_mobs")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Health Remaining Distribution'", plotOutput("hist_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Hunger vs Health'", plotOutput("scatter_hunger_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Blocks Placed vs Destroyed'", plotOutput("scatter_blocks")),
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Armor Equipped'", tableOutput("table_armor")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Armor Equipped'", plotOutput("barplot_armor")),
conditionalPanel(
condition = "input.data_type == '3D Map' && input.data_view == 'Player 3D Position'", plotlyOutput("plot_3d_position"))
)
)
)
# Define Server
server <- function(input, output, session) {
updateSelectInput(session, "player_type", choices = unique(df$player_type))
filtered_data <- reactive({
req(input$player_type)
df[df$player_type == input$player_type & !is.na(df$armor_equipped), ]
})
output$barplot_tool <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = tools_used,fill = tools_used)) +
geom_bar() +
theme_minimal() +
labs(title = "Tools Used", x = "Tool Type", y = "Count")
})
output$table_tool <- renderTable({
req(nrow(filtered_data()) > 0)
tool_table <- as.data.frame(table(filtered_data()$tools_used))
colnames(tool_table) <- c("Tools Used", "Number")
tool_table
})
output$boxplot_mobs <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = biome, y = mobs_killed,fill = biome)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Mobs Killed vs Biome", x = "Biome", y = "Mobs Killed")
})
output$hist_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = health_remaining)) +
geom_histogram(aes(y = after_stat(density)), fill="thistle", alpha = 0.4, color = "black")+
geom_density(color = "red")+
theme_minimal() +
labs(title = "Health Remaining Distribution", x = "Health Remaining")
})
output$scatter_hunger_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = hunger_level, y = health_remaining)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Hunger Level vs Health Remaining", x = "Hunger Level", y = "Health Remaining")
})
output$scatter_blocks <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = blocks_placed, y = blocks_destroyed)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Blocks Placed vs Blocks Destroyed", x = "Blocks Placed", y = "Blocks Destroyed")
})
output$table_armor <- renderTable({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
if (nrow(armor_table) == 0) return(data.frame("Armor Type" = "No Data", "Number" = 0))
armor_table
})
output$barplot_armor <- renderPlot({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
req(nrow(armor_table) > 0)
ggplot(armor_table, aes(x = reorder(`Armor Type`, -Number), y = Number)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Armor Equipped", x = "Armor Type", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$plot_3d_position <- renderPlotly({
req(nrow(filtered_data()) > 0)
plot_ly(
filtered_data(), x = ~coordinates_x, y = ~coordinates_y, z = ~coordinates_z,
type = "scatter3d", mode = "markers", marker = list(size = 3, color = 'skyblue')
) %>%
layout(title = "Player 3D Position",
scene = list(xaxis = list(title = "X Coordinate"),
yaxis = list(title = "Y Coordinate"),
zaxis = list(title = "Z Coordinate")))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(gtools)
library(DT)
library(readr)
library(shiny)
library(plotly)
options(scipen=999)#cancels scientific notation for the session
minecraft <- read_csv("copy_of_jiamins_minecraft_game_usage.csv")
# Load required libraries
library(shiny)
library(shinydashboard)
library(ggplot2)
library(DT)
library(plotly)  # Load plotly for 3D plotting
library(readr)
# Read the data
minecraft <- read_csv("copy_of_jiamins_minecraft_game_usage.csv")
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "Minecraft"),
dashboardSidebar(
sidebarMenu(
menuItem("Data Table", tabName = "data", icon = icon("table")),
menuItem("Bar Graph", tabName = "graph", icon = icon("chart-column")),
menuItem("Scatter Plot", tabName = "plot", icon = icon("chart-line")),
menuItem("3D Plot", tabName = "three_D", icon = icon("cubes"))
)
),
dashboardBody(
tabItems(
# First tab: Data Table
tabItem(
tabName = "data",
h2("Data Table"),
DTOutput("data_table")
),
# Second tab: Summary Statistics
tabItem(
tabName = "graph",
h2("Bar Graph"),
selectInput("x_var", "X-axis Variable", choices = c("Tools_Used", "Armor_Equipped", "Weather", "Game_Mode", "Day_Cycle", "Deaths", "Health_Remaining", "Hunger_Level", "Biome"), selected = "Deaths"),
selectInput("y_var", "Fill Variable", choices = c("Tools_Used", "Armor_Equipped", "Weather", "Game_Mode", "Day_Cycle", "Deaths", "Health_Remaining", "Hunger_Level", "Biome"), selected = "Game_Mode"),
plotOutput("bar_graph")
),
# Third tab: Scatter Plot
tabItem(
tabName = "plot",
h2("Scatter Plot"),
selectInput("x_var", "X-axis Variable", choices = c("Playtime_minutes", "Blocks_Placed", "Blocks_Destroyed", "Items_Crafted", "Mobs_Killed", "Deaths", "Health_Remaining", "Hunger_Level", "Experience_Level", "Chat_Messages"), selected = "Blocks_Placed"),
selectInput("y_var", "Y-axis Variable", choices = c("Playtime_minutes", "Blocks_Placed", "Blocks_Destroyed", "Items_Crafted", "Mobs_Killed", "Deaths", "Health_Remaining", "Hunger_Level", "Experience_Level", "Chat_Messages"), selected = "Blocks_Destroyed"),
plotOutput("scatter_plot")
),
# Fourth tab: 3D Plot
tabItem(
tabName = "three_D",
h2("3D Plot"),
selectInput("x",
"Select Game Mode",
choices = unique(minecraft$Game_Mode),
selected = "Survival"),
plotlyOutput("three_D_plot")  # Use plotlyOutput here
)
)
)
)
# Define Server
server <- function(input, output) {
# Render Data Table
output$data_table <- renderDT({
minecraft %>%
select("Playtime_minutes", "Blocks_Placed", "Blocks_Destroyed", "Items_Crafted", "Mobs_Killed", "Deaths", "Biome", "Health_Remaining", "Hunger_Level", "Experience_Level", "Tools_Used", "Armor_Equipped", "Weather", "Game_Mode", "Day_Cycle", "Chat_Messages") %>%
datatable(options = list(pageLength = 10))
})
# Render Summary Statistics
output$bar_graph <- renderPlot({
ggplot(minecraft, aes_string(x = input$x_var, fill = input$y_var)) +
geom_bar() +
theme_minimal() +
labs(title = paste("Bar Graph of", input$x_var, "Filled by", input$y_var))
})
# Render Scatter Plot
output$scatter_plot <- renderPlot({
ggplot(minecraft, aes_string(x = input$x_var, y = input$y_var)) +
geom_point() +
geom_smooth(method = lm, se = TRUE) +
labs(title = paste("Scatter Plot of", input$x_var, "vs", input$y_var)) +
theme_minimal()
})
# Render 3D Plot using plotly
output$three_D_plot <- renderPlotly({
# Filter the data based on selected Game Mode
filtered_data <- minecraft %>% filter(Game_Mode == input$x)
# Create the 3D scatter plot
plot_ly(filtered_data,
x = ~Coordinates_X,
y = ~Coordinates_Z,
z = ~Coordinates_Y,
type = "scatter3d",
mode = "markers",
marker = list(size = 3, color = 'skyblue'))  # Added closing parenthesis here
})
}
# Run the app
shinyApp(ui, server)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(gtools)
library(DT)
library(readr)
library(shiny)
library(plotly)
# Load dataset
df <- read.csv("clean_survival_PC_MCdata.csv")
df$player_type <- trimws(as.character(df$player_type))
# Define UI
ui <- fluidPage(
titlePanel("Minecraft Player Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("player_type", "Select Player Type:", choices = NULL),
selectInput("data_type", "Select Data Type:", choices = c("Table", "Graph", "3D Map")),
selectInput("data_view", "Select View:", choices = c("Tool Used", "Mobs Killed vs Biome", "Health Remaining Distribution", "Hunger vs Health", "Blocks Placed vs Destroyed", "Armor Equipped", "Player 3D Position"))
),
mainPanel(
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Tool Used'", tableOutput("table_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Tool Used'", plotOutput("barplot_tool")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Mobs Killed vs Biome'", plotOutput("boxplot_mobs")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Health Remaining Distribution'", plotOutput("hist_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Hunger vs Health'", plotOutput("scatter_hunger_health")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Blocks Placed vs Destroyed'", plotOutput("scatter_blocks")),
conditionalPanel(
condition = "input.data_type == 'Table' && input.data_view == 'Armor Equipped'", tableOutput("table_armor")),
conditionalPanel(
condition = "input.data_type == 'Graph' && input.data_view == 'Armor Equipped'", plotOutput("barplot_armor")),
conditionalPanel(
condition = "input.data_type == '3D Map' && input.data_view == 'Player 3D Position'", plotlyOutput("plot_3d_position"))
)
)
)
# Define Server
server <- function(input, output, session) {
updateSelectInput(session, "player_type", choices = unique(df$player_type))
filtered_data <- reactive({
req(input$player_type)
df[df$player_type == input$player_type & !is.na(df$armor_equipped), ]
})
output$barplot_tool <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = tools_used,fill = tools_used)) +
geom_bar() +
theme_minimal() +
labs(title = "Tools Used", x = "Tool Type", y = "Count")
})
output$table_tool <- renderTable({
req(nrow(filtered_data()) > 0)
tool_table <- as.data.frame(table(filtered_data()$tools_used))
colnames(tool_table) <- c("Tools Used", "Number")
tool_table
})
output$boxplot_mobs <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = biome, y = mobs_killed,fill = biome)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Mobs Killed vs Biome", x = "Biome", y = "Mobs Killed")
})
output$hist_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = health_remaining)) +
geom_histogram(aes(y = after_stat(density)), fill="thistle", alpha = 0.4, color = "black")+
geom_density(color = "red")+
theme_minimal() +
labs(title = "Health Remaining Distribution", x = "Health Remaining")
})
output$scatter_hunger_health <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = hunger_level, y = health_remaining)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Hunger Level vs Health Remaining", x = "Hunger Level", y = "Health Remaining")
})
output$scatter_blocks <- renderPlot({
req(nrow(filtered_data()) > 0)
ggplot(filtered_data(), aes(x = blocks_placed, y = blocks_destroyed)) +
geom_point() +
geom_smooth(method = lm, se=T)+
theme_minimal() +
labs(title = "Blocks Placed vs Blocks Destroyed", x = "Blocks Placed", y = "Blocks Destroyed")
})
output$table_armor <- renderTable({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
if (nrow(armor_table) == 0) return(data.frame("Armor Type" = "No Data", "Number" = 0))
armor_table
})
output$barplot_armor <- renderPlot({
req(nrow(filtered_data()) > 0)
armor_table <- as.data.frame(table(filtered_data()$armor_equipped))
colnames(armor_table) <- c("Armor Type", "Number")
armor_table <- armor_table[order(-armor_table$Number), ]
req(nrow(armor_table) > 0)
ggplot(armor_table, aes(x = reorder(`Armor Type`, -Number), y = Number)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Armor Equipped", x = "Armor Type", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$plot_3d_position <- renderPlotly({
req(nrow(filtered_data()) > 0)
plot_ly(
filtered_data(), x = ~coordinates_x, y = ~coordinates_y, z = ~coordinates_z,
type = "scatter3d", mode = "markers", marker = list(size = 3, color = 'skyblue')
) %>%
layout(title = "Player 3D Position",
scene = list(xaxis = list(title = "X Coordinate"),
yaxis = list(title = "Y Coordinate"),
zaxis = list(title = "Z Coordinate")))
})
}
# Run the application
shinyApp(ui = ui, server = server)
